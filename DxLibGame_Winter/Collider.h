#pragma once
#include "Vector2.h"
#include <memory>

class CircleCollider;
class BoxCollider;
class LineCollider;

enum class ColKind
{
	kCircle,
	kBox,
	kLine,
};

/// <summary>
/// コライダーが計算した後に出てくるいろんな情報をひとまとめにして返したかった
/// </summary>
struct CollisionStatus
{
	// 当たっているか
	bool isCollide = false;
	// 当たった面に垂直に、どれくらいの向き、大きさでめり込んでいるかを出してくれます
	Vector2 overlap = Vector2::Zero();
};

/// <summary>
/// 当たり判定をつかさどる基底クラス
/// </summary>
class Collider
{
protected:
	/// <summary>
	/// 自分がアタッチされているオブジェクトの座標を参照
	/// </summary>
	Vector2& m_pos;

	const ColKind m_kind;

public:
	Collider(ColKind kind, Vector2& pos);

	Vector2 GetPos() const { return m_pos; }
	// 使うなよ
	Vector2* GetPVec() const { return &m_pos; }
	ColKind GetKind() const { return m_kind; }

	CollisionStatus CheckHit(Collider& other) const;
	// 補正あり これから加算する移動量を加味するときなどに有効
	CollisionStatus CheckHit(Collider& other, const Vector2& offset) const;

protected:
	// ここから先の関数は外部には見せない
	// 外部からはCheckHit(Collider)呼んでもらって、その中でフラグ使って分岐する
	// でもこれやると当たり判定の種類が増えるごとにどんどん組み合わせが増えて関数名が増えていくじゃない
	// でもよく考えたらオーバーロードが増えるのは同じでした

	/// <summary>
	/// 当たり判定の取得(対円形)
	/// </summary>
	/// <param name="other">円形の当たり判定</param>
	/// <returns>接触しているかどうか</returns>
	virtual CollisionStatus CheckHitCircle(const CircleCollider& other) const = 0;
	virtual CollisionStatus CheckHitCircle(const CircleCollider& other, const Vector2& offset) const = 0;
	/// <summary>
	/// 当たり判定の取得(対矩形)
	/// </summary>
	/// <param name="other">矩形の当たり判定</param>
	/// <returns>接触しているかどうか</returns>
	virtual CollisionStatus CheckHitBox(const BoxCollider& other) const = 0;
	virtual CollisionStatus CheckHitBox(const BoxCollider& other, const Vector2& offset) const = 0;
	// これしかいらんやろ
	virtual CollisionStatus CheckHitLine(const LineCollider& otherLine, const Vector2& offset) const = 0;
};

